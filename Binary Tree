class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self, root_val):
        self.root = TreeNode(root_val)

    def insert_left(self, current_node, val):
        current_node.left = TreeNode(val)
        return current_node.left

    def insert_right(self, current_node, val):
        current_node.right = TreeNode(val)
        return current_node.right

    def inorder_traversal(self, node):
        if node:
            self.inorder_traversal(node.left)
            print(node.val, end=' ')
            self.inorder_traversal(node.right)

    def preorder_traversal(self, node):
        if node:
            print(node.val, end=' ')
            self.preorder_traversal(node.left)
            self.preorder_traversal(node.right)

    def postorder_traversal(self, node):
        if node:
            self.postorder_traversal(node.left)
            self.postorder_traversal(node.right)
            print(node.val, end=' ')
bt = BinaryTree(1)
left = bt.insert_left(bt.root, 2)
right = bt.insert_right(bt.root, 3)
bt.insert_left(left, 4)
bt.insert_right(left, 5)
bt.insert_left(right, 6)
bt.insert_right(right, 7)

print("Inorder Traversal:")
bt.inorder_traversal(bt.root)

print("\nPreorder Traversal:")
bt.preorder_traversal(bt.root)

print("\nPostorder Traversal:")
bt.postorder_traversal(bt.root)

